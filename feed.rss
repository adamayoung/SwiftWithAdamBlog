<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Swift with Adam</title><description>Articles on everything you need to know about Swift</description><link>https://swiftwithadam.com</link><language>en</language><lastBuildDate>Thu, 3 Feb 2022 20:31:07 +0000</lastBuildDate><pubDate>Thu, 3 Feb 2022 20:31:07 +0000</pubDate><ttl>250</ttl><atom:link href="https://swiftwithadam.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://swiftwithadam.com/architecture/dependency-injection</guid><title>Dependency Injection</title><description>Dependency Injection allows us to create more maintainable code which is easier to test.</description><link>https://swiftwithadam.com/architecture/dependency-injection</link><pubDate>Tue, 1 Feb 2022 19:41:00 +0000</pubDate><content:encoded><![CDATA[<p>In a nutshell, dependency injection means creating dependencies outside of the class that uses them and passing those dependencies to it, rather than the class creating them itself.</p><h2>Without Dependency Injection</h2><pre><code><span class="keyword">class</span> RandomNumberGenerator {

    <span class="keyword">func</span> generate() -&gt; <span class="type">Int</span> {
        <span class="type">Int</span>.<span class="call">random</span>(in: <span class="number">1</span>...<span class="number">10</span>)
    }

}

<span class="keyword">class</span> SomeService {

    <span class="keyword">let</span> generator = <span class="type">RandomNumberGenerator</span>()

    <span class="keyword">func</span> nextNumber() -&gt; <span class="type">Int</span> {
        generator.<span class="call">generate</span>()
    }

}

<span class="keyword">let</span> service = <span class="type">SomeService</span>()
<span class="keyword">let</span> number = service.<span class="call">nextNumber</span>()
</code></pre><p>Although this does the job of getting the next number, it's not very maintainable or easy to test. What if you wanted to change the number generator to a different implementation? How would you even test <code>SomeService</code>?</p><h2>With Dependency Injection</h2><pre><code><span class="keyword">protocol</span> NumberGenerator {

    <span class="keyword">func</span> generate() -&gt; <span class="type">Int</span>

}

<span class="keyword">final class</span> RandomNumberGenerator: <span class="type">NumberGenerator</span> {

    <span class="keyword">func</span> generate() -&gt; <span class="type">Int</span> {
        <span class="type">Int</span>.<span class="call">random</span>(in: <span class="number">1</span>...<span class="number">10</span>)
    }

}

<span class="keyword">final class</span> SomeService {

    <span class="keyword">private let</span> generator: <span class="type">NumberGenerator</span>

    <span class="keyword">init</span>(generator: <span class="type">NumberGenerator</span>) {
        <span class="keyword">self</span>.<span class="property">generator</span> = generator
    }

    <span class="keyword">func</span> nextNumber() -&gt; <span class="type">Int</span> {
        generator.<span class="call">generate</span>()
    }

}

<span class="keyword">let</span> generator = <span class="type">RandomNumberGenerator</span>()
<span class="keyword">let</span> service = <span class="type">SomeService</span>(generator: generator)
<span class="keyword">let</span> number = service.<span class="call">nextNumber</span>()
</code></pre><p><code>SomeService</code> requires something that implements <code>NumberGenerator</code>, but it doesn't care about what specific implementation it's using. If some point in the future we wanted to use a Fibonacci number generator, all we'd have to do is create a <code>FibonacciNumberGenerator</code> class which implements <code>NumberGenerator</code> and pass that to <code>SomeService</code> when we initialise it. The <code>SomeService</code> class wouldn't need to change at all.</p><h2>Unit testing with Dependency Injection</h2><p>How would you test <code>SomeService</code>'s <code>nextNumber()</code> method is returning the correct number if you used our first example? It would be pretty hard!</p><p>If we use the second example we could make a mock number generator and get it to return the numbers of our choice when setting up the test.</p><pre><code><span class="keyword">final class</span> MockNumberGenerator: <span class="type">NumberGenerator</span> {

    <span class="keyword">let</span> numbers: [<span class="type">Int</span>]
    <span class="keyword">private var</span> index = <span class="number">0</span>

    <span class="keyword">init</span>(numbers: [<span class="type">Int</span>]) {
        <span class="keyword">self</span>.<span class="property">numbers</span> = numbers
    }

    <span class="keyword">func</span> generate() -&gt; <span class="type">Int</span> {
        <span class="keyword">let</span> number = numbers[index % numbers.<span class="property">count</span>]
        index += <span class="number">1</span>
        <span class="keyword">return</span> number
    }

}

<span class="keyword">final class</span> SomeServiceTests: <span class="type">XCTestCase</span> {

    <span class="keyword">var</span> service: <span class="type">SomeService</span>!

    <span class="keyword">override func</span> setUp() {
        <span class="keyword">super</span>.<span class="call">setUp</span>()
        <span class="keyword">let</span> generator = <span class="type">MockNumberGenerator</span>(numbers: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])
        <span class="keyword">self</span>.<span class="property">service</span> = <span class="type">SomeService</span>(generator: generator)
    }

    <span class="keyword">override func</span> tearDown() {
        <span class="keyword">self</span>.<span class="property">service</span> = <span class="keyword">nil
        super</span>.<span class="call">tearDown</span>()
    }

    <span class="keyword">func</span> testNextNumberReturnsCorrectNumbers() {
        <span class="call">XCTAssertEqual</span>(service.<span class="call">nextNumber</span>(), <span class="number">1</span>)
        <span class="call">XCTAssertEqual</span>(service.<span class="call">nextNumber</span>(), <span class="number">2</span>)
        <span class="call">XCTAssertEqual</span>(service.<span class="call">nextNumber</span>(), <span class="number">3</span>)
        <span class="call">XCTAssertEqual</span>(service.<span class="call">nextNumber</span>(), <span class="number">4</span>)
        <span class="call">XCTAssertEqual</span>(service.<span class="call">nextNumber</span>(), <span class="number">5</span>)
    }

}
</code></pre><p>Using a mock number generator lets us unit test <code>SomeService</code> in isolation. It doesn't matter what implementation of <code>NumberGenerator</code> we actually use with <code>SomeService</code> or if we change it at a later date, this test case and its tests will still be valid and won't need to change.</p><h2>How to use Dependency Injection in Real Life?</h2><h3>Easiest way - To it yourself</h3><p>The quickest and easiest way to start using dependency injection is to use Swift's default parameter value feature.</p><p>e.g.</p><pre><code><span class="keyword">final class</span> SomeService {

    <span class="keyword">private let</span> generator: <span class="type">NumberGenerator</span>

    <span class="keyword">init</span>(generator: <span class="type">NumberGenerator</span> = <span class="type">RandomNumberGenerator</span>()) {
        <span class="keyword">self</span>.<span class="property">generator</span> = generator
    }

    <span class="keyword">func</span> nextNumber() -&gt; <span class="type">Int</span> {
        generator.<span class="call">generate</span>()
    }

}
</code></pre><p>Then we create our <code>SomeService</code>:</p><pre><code><span class="keyword">let</span> service = <span class="type">SomeService</span>()
</code></pre><p>It also allows us to inject a different <code>NumberGenerator</code> if we want, or when we test it.</p><pre><code><span class="keyword">let</span> generator = <span class="type">SomeOtherNumberGenerator</span>()
<span class="keyword">let</span> service = <span class="type">SomeService</span>(generator: generator)
</code></pre><h3>Dependency Injection Frameworks</h3><p>There are several Swift Dependency Frameworks out there. A few are,</p><ul><li><a href="https://github.com/hmlongco/Resolver">Resolver</a></li><li><a href="https://github.com/square/Cleanse">Cleanse</a></li><li><a href="https://github.com/Swinject/Swinject">Swinject</a></li></ul><p>They allow you to setup a Dependency Injection container and then resolve dependencies when you need them. They tend to deal with or warn you about cyclic dependencies too, something which the 'Do it yourself' way doesn't.</p><p>On the other hand, your whole codebase is tied to the framework you use. If at some point you want to use a different framework it's not always easy to rip out the old one.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftwithadam.com/swift/map-filter-reduce</guid><title>Map, Filter and Reduce</title><description>Map, filter and reduce allow you to manipulate sequences. You iterate of a list of items and perform an action on each of those items.</description><link>https://swiftwithadam.com/swift/map-filter-reduce</link><pubDate>Wed, 19 Jan 2022 22:39:00 +0000</pubDate><content:encoded><![CDATA[<p>Map, filter and reduce are handy tools for allowing you to manipulate <a href="https://developer.apple.com/documentation/swift/sequence">sequences</a> in Swift. They are available in most other programming languages too. At first they might seem a little strange, but once you get the hang of them it allows you to write concise and elegant code to get a task done.</p><h2>Map</h2><p>Map lets you iterate over a sequence (e.g. an <code>Array</code>) of items and 'transform' each item into something else, returning an array of those new items.</p><h3>Arrays</h3><p>Take this example - we have a list of <code>Int</code>s and we want to double each number in that array and get back a new array containing those new numbers. If you've never used map before you might attempt to do this by,</p><pre><code><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]
<span class="keyword">var</span> numbersDoubled = [<span class="type">Int</span>]()

<span class="keyword">for</span> number <span class="keyword">in</span> numbers {
    <span class="keyword">let</span> doubled = number * <span class="number">2</span>
    numbersDoubled.<span class="call">append</span>(doubled)
}

<span class="comment">// [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</span>
</code></pre><p>Looks fine right?</p><p>Map allows you to do this in a much neater way. For example,</p><pre><code><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]
<span class="keyword">let</span> numbersDoubled = numbers.<span class="call">map</span> { (number: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in
    return</span> number * <span class="number">2</span>
}

<span class="comment">// [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</span>
</code></pre><p>which could be simplified to,</p><pre><code><span class="keyword">let</span> numbersDoubled = numbers.<span class="call">map</span> { number <span class="keyword">in</span>
    number * <span class="number">2</span>
}
</code></pre><p>and simplified even further to,</p><pre><code><span class="keyword">let</span> numbersDoubled = numbers.<span class="call">map</span> { $0 * <span class="number">2</span> }
</code></pre><p>Map is also useful when used with a list of <code>struct</code>s or <code>class</code>es. For example, suppose we have a list of people, and we want to get a list of just their names.</p><pre><code><span class="keyword">struct</span> Person {
    <span class="keyword">let</span> name: <span class="type">String</span>
}

<span class="keyword">let</span> people = [
    <span class="type">Person</span>(name: <span class="string">"Adam"</span>),
    <span class="type">Person</span>(name: <span class="string">"Dave"</span>),
    <span class="type">Person</span>(name: <span class="string">"Rob"</span>),
    <span class="type">Person</span>(name: <span class="string">"Matthew"</span>)
]

<span class="keyword">let</span> names = people.<span class="call">map</span> { $0.<span class="property">name</span> }

<span class="comment">// ["Adam", "Dave", "Rob", "Matthew"]</span>
</code></pre><p>We could simplify the map by using a <a href="https://developer.apple.com/documentation/swift/keypath">KeyPath</a>,</p><pre><code><span class="keyword">let</span> names = people.<span class="call">map</span>(\.<span class="property">name</span>)
</code></pre><h3>Dictionaries</h3><p>Map can be used with <code>Dictionary</code>s too.</p><pre><code><span class="keyword">let</span> countryCapitals = [
    <span class="string">"England"</span>: <span class="string">"London"</span>,
    <span class="string">"France"</span>: <span class="string">"Paris"</span>,
    <span class="string">"Germany"</span>: <span class="string">"Berlin"</span>,
    <span class="string">"Italy"</span>: <span class="string">"Rome"</span>
]

<span class="keyword">let</span> countries = countryCapitals.<span class="call">map</span> { key, value <span class="keyword">in
    return</span> key
}

<span class="comment">// ["England", "France", "Germany", "Italy"]</span>

<span class="keyword">let</span> capitalCities = countryCapitals.<span class="call">map</span> { key, value <span class="keyword">in
    return</span> value
}

<span class="comment">// ["London", "Paris", "Berlin", "Rome"]</span>
</code></pre><p>which could be simplified to,</p><pre><code><span class="keyword">let</span> countries = countryCapitals.<span class="call">map</span> { $0 }

<span class="keyword">let</span> capitalCities = countryCapitals.<span class="call">map</span> { $1 }
</code></pre><p>and even further simplified using <code>KeyPath</code>s,</p><pre><code><span class="keyword">let</span> countries = countryCapitals.<span class="call">map</span>(\.<span class="property">key</span>)

<span class="keyword">let</span> capitalCities = countryCapitals.<span class="call">map</span>(\.<span class="property">value</span>)
</code></pre><h2>Filter</h2><p>Filter, as the name suggests, lets you iterate over a sequence of items, see if the match a predicate, returning an array of those items with match that predicate.</p><p>Suppose we have an array of <code>Int</code>s, and we want to filter out all the even numbers in that array,</p><pre><code><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]
<span class="keyword">let</span> evenNumbers = numbers.<span class="call">filter</span> { (number: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in
    return</span> number % <span class="number">2</span> == <span class="number">0</span>
}

<span class="comment">// [2, 4, 6, 8, 10]</span>
</code></pre><p>which could be simplified to,</p><pre><code><span class="keyword">let</span> evenNumbers = numbers.<span class="call">filter</span> { $0 % <span class="number">2</span> == <span class="number">0</span> }
</code></pre><p>Another example, let's say we have a list of people, and want to filter out people who's name begins with the letter A,</p><pre><code><span class="keyword">struct</span> Person {
    <span class="keyword">let</span> name: <span class="type">String</span>
}

<span class="keyword">let</span> people = [
    <span class="type">Person</span>(name: <span class="string">"Adam"</span>),
    <span class="type">Person</span>(name: <span class="string">"Dave"</span>),
    <span class="type">Person</span>(name: <span class="string">"Rob"</span>),
    <span class="type">Person</span>(name: <span class="string">"Adrian"</span>),
    <span class="type">Person</span>(name: <span class="string">"Matthew"</span>),
    <span class="type">Person</span>(name: <span class="string">"Albert"</span>)
]

<span class="keyword">let</span> aPeople = people.<span class="call">filter</span> {
    $0.<span class="property">name</span>.<span class="call">lowercased</span>().<span class="call">starts</span>(with: <span class="string">"a"</span>)
}

<span class="comment">// ["Adam", "Adrian", "Albert"]</span>
</code></pre><h2>Using Map and Filter</h2><p>Because map and filter return a sequence of items, you can chain map and filter together to do more complex things. For example,</p><pre><code><span class="keyword">struct</span> Person {
    <span class="keyword">let</span> name: <span class="type">String</span>
}

<span class="keyword">let</span> names = [<span class="string">"Adam"</span>, <span class="string">"Dave"</span>, <span class="string">"Rob"</span>, <span class="string">"Adrian"</span>, <span class="string">"Matthew"</span>, <span class="string">"Albert"</span>, <span class="string">"Richard"</span>]

<span class="keyword">let</span> rPeople = names
    .<span class="call">map</span> { name <span class="keyword">in</span>
        <span class="type">Person</span>(name: name)
    }
    .<span class="call">filter</span> { person <span class="keyword">in</span>
        person.<span class="property">name</span>.<span class="call">lowercased</span>().<span class="call">starts</span>(with: <span class="string">"r"</span>)
    }

<span class="comment">// ["Rob", "Richard"]</span>
</code></pre><p>which could be simplified to,</p><pre><code><span class="keyword">let</span> rPeople = names
    .<span class="call">map</span>(<span class="type">Person</span>.<span class="keyword">init</span>)
    .<span class="call">filter</span> { $0.<span class="property">name</span>.<span class="call">lowercased</span>().<span class="call">starts</span>(with: <span class="string">"r"</span>) }
</code></pre><h2>Reduce</h2><p>Reduce is probably the least commonly used of the Map, Filter and Reduce combo. Reduce allows you to iterate over a sequence of items, and combine all those items into a single value.</p><p>Here's an example. Suppose we have a list of <code>Int</code>s, and we want to find the sum of those <code>Int</code>s,</p><pre><code><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]
<span class="keyword">let</span> summedNumbers = numbers.<span class="call">reduce</span>(<span class="number">0</span>) { total, number <span class="keyword">in
    return</span> total + number
}

<span class="comment">// 55</span>
</code></pre><p>Reduce takes two parameters. The first is the initial result of what you're going to get back after reduce as iterated over your list. The second is a closure, which takes two parameters and returns the new value. The first is the next partial result (the result of the previous items having the closure called on them), and the second is the next value in the sequence we're iterating over.</p><p>The above can be simplified to,</p><pre><code><span class="keyword">let</span> summedNumbers = numbers.<span class="call">reduce</span>(<span class="number">0</span>) { $0 + $1 }
</code></pre><p>and even further to,</p><pre><code><span class="keyword">let</span> summedNumbers = numbers.<span class="call">reduce</span>(<span class="number">0</span>, +)
</code></pre><p>Another example, let's concatenate an <code>Array</code> of strings into one string,</p><pre><code><span class="keyword">let</span> letters = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>]
<span class="keyword">let</span> text = letters.<span class="call">reduce</span>(<span class="string">""</span>, +)

<span class="comment">// "ABCDE"</span>
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftwithadam.com/tooling/swiftlint</guid><title>SwiftLint</title><description>Linting is the automated checking of your source code to flag programming errors, bugs, stylistic errors, and suspicious constructs. SwiftLint is a linter specifically for Swift code. But how do you use it?</description><link>https://swiftwithadam.com/tooling/swiftlint</link><pubDate>Wed, 19 Jan 2022 21:09:00 +0000</pubDate><content:encoded><![CDATA[<h2>What is a Linter?</h2><p>Linting is the automated checking of your source code to flag programming errors, bugs, stylistic errors, and suspicious constructs. This is done by using a lint tool (otherwise known as linter). A lint tool is a basic static code analyzer.</p><h2>Why should you use a Linter in your development process?</h2><p>Linting is a way to reduce errors and improve the overall quality of your code. Using lint tools can help you accelerate development and reduce costs by finding errors earlier. The earlier a problem is found, the cheaper it is to fix.</p><p>It also helps when you share the codebase with a team. A linter can ensure everyone is following the same coding styles.</p><h2>How does it fit in with your development workflow?</h2><p>Typically, you'd add the linting step before building/compiling code. The process might look like:</p><ol><li>Write some code</li><li>Build it</li><li>Linter analyses your code</li><li>Warnings and errors are shown along with any compiler errors</li><li>Fix linting issues</li><li>Built it again</li></ol><h2>Introducing SwiftLint</h2><p><a href="https://github.com/realm/SwiftLint">SwiftLint</a> is a linter specifically for Swift code.</p><blockquote><p>A tool to enforce Swift style and conventions, loosely based on the now archived GitHub Swift Style Guide. SwiftLint enforces the style guide rules that are generally accepted by the Swift community. These rules are well described in popular style guides like Ray Wenderlich's Swift Style Guide.</p></blockquote><h2>Installing</h2><p>SwiftLint can be installed in a number of ways. The most common being by homebrew.</p><pre><code>brew install swiftlint
</code></pre><p>Many CI/CD services like GitHub Actions, Bitrise or TravisCI have swiftlint installed by default on their macOS environments, saving you the time of installing it yourself.</p><h2>Running via the Terminal</h2><p>Once you have it installed, simply go to the root of your project or Swift Package in the terminal and run</p><pre><code>swiftlint
</code></pre><p>The command will log all the places it's found a volation in your code, followed by summary of total violations.</p><h2>Running in an Xcode Project</h2><p>Xcode project targets can be configured to run custom build phases as part of the build process.</p><ol><li>Open your project in Xcode</li><li>Select the Project in the Project Navigator</li><li>Select the main target in your project</li><li>Click on the <strong>Build Phases</strong> tab</li><li>Add a new <strong>Run Script Phase</strong></li><li>Add the following script</li></ol><pre><code><span class="keyword">if</span> which swiftlint &gt;/dev/null; then
    swiftlint
<span class="keyword">else</span>
    echo <span class="string">"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"</span>
fi
</code></pre><p>Now whenever you build your target, SwiftLint will show you any violations as warnings or errors in your source code.</p><h2>Running in a Swift Package</h2><p>Unfortunately you cannot currently configure Swift Package Manager to run custom build phase scripts like you can with Xcode projects.</p><p>A proposal in Swift, called Package Manager Extensible Build Tools <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0303-swiftpm-extensible-build-tools.md">(SE-0303)</a> has been implemented, and is available in Swift 5.6, which is not yet released.</p><h2>Configure Linting Rules</h2><p>The standard set of linting rules can be in the <a href="https://realm.github.io/SwiftLint/rule-directory.html">Rule Directory Reference</a>. But you may want to tweak this rules to suit your own style. These custom rules can be added to a file called <code>.swiftlint.yml</code> in the directory where you will run swiftlint from.</p><p>Example <code>.swiftlint.yml</code> file:</p><pre><code>excluded:
  - .<span class="dotAccess">build</span>

identifier_name:
  min_length:
    error: <span class="number">4</span>
  max_length: <span class="number">60</span>
  excluded:
    - id
    - lhs
    - rhs
    - url
</code></pre><p>See the SwiftLint <a href="https://github.com/realm/SwiftLint/blob/master/README.md">README.md</a> for more details on rules and how to create custom ones.</p><h2>Strict mode</h2><p>By default, any warnings that SwiftLint raises won't actually fail the linting - because they're just warnings and not errors. However, in some cases you may want to fail the linting when it does find warnings. One example might be when linting as part of your CI pipeline. To use SwiftLint in strict mode,</p><pre><code>swiftlint --strict
</code></pre><h2>Running as part of your CI pipeline</h2><p>Part of any good Software Development Lifecycle is the use of CI (Continuous Integration) pipelines. It automates a lot of the checking and testing of our code which would otherwise have to be done manually. Linting your code is a common task as part of this.</p><h3>GitHub Actions</h3><p>I use <a href="https://github.com/features/actions">GitHub Actions</a> as my primary CI/CD tool. For public repositories it's free to use. The macOS environments available with GitHub Actions come with SwiftLint installed by default, saving you time installing it yourself.</p><p>Here's an example workflow which checks out the repository and lints all <code>.swift</code> source files:</p><pre><code>name: <span class="type">CI</span>

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: <span class="type">Lint</span>
    runs-on: macos-latest
    steps:
      - name: <span class="type">Checkout</span>
        uses: actions/checkout@v2
        with:
          fetch-depth: <span class="number">0</span>

      - name: swiftlint
        run: swiftlint --strict
</code></pre>]]></content:encoded></item></channel></rss>